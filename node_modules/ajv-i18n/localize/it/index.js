'use strict';
module.exports = function localize_it(errors) {
  if (!(errors && errors.length)) return;
  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    var out;
    switch (e.keyword) {
      case '$ref':
        out = 'non può risolvere il riferimento ' + (e.params.escaped);
        break;
      case 'additionalItems':
        out = '';
        var n = e.schema.length;
        out += 'non dovrebbe avere più di ' + (n) + ' element';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        break;
      case 'additionalProperties':
        out = 'non dovrebbe avere attributi aggiuntive';
        break;
      case 'anyOf':
        out = 'deve corrispondere qualche schema in "anyOf"';
        break;
      case 'dependencies':
        out = '';
        var n = e.params.n;
        out += 'dovrebbe avere attribut';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        out += ' ' + (e.params.deps) + ' quando attributo ' + (e.params.property) + ' è presente';
        break;
      case 'enum':
        out = 'dovrebbe essere pari ad uno dei valori predefiniti';
        break;
      case 'format':
        out = 'deve corrispondere formato "' + (e.params.escaped) + '"';
        break;
      case 'maxItems':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe avere più di ' + (n) + ' element';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        break;
      case 'maxLength':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe essere più lungo di ' + (n) + ' caratter';
        if (n == 1) {
          out += 'e';
        } else {
          out += 'i';
        }
        break;
      case 'maxProperties':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe avere più ' + (n) + ' attribut';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        break;
      case 'maximum':
        out = 'dovrebbe essere ' + (e.params.condition);
        break;
      case 'minItems':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe avere meno di ' + (n) + ' element';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        break;
      case 'minLength':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe essere meno lungo di ' + (n) + ' caratter';
        if (n == 1) {
          out += 'e';
        } else {
          out += 'i';
        }
        break;
      case 'minProperties':
        out = '';
        var n = e.schema;
        out += 'non dovrebbe avere meno ' + (n) + ' attribut';
        if (n == 1) {
          out += 'o';
        } else {
          out += 'i';
        }
        break;
      case 'minimum':
        out = 'dovrebbe essere ' + (e.params.condition);
        break;
      case 'multipleOf':
        out = 'dovrebbe essere un multiplo di ' + (e.schema);
        break;
      case 'not':
        out = 'non dovrebbe essere valida in base allo schema di "non"';
        break;
      case 'oneOf':
        out = 'dovrebbe corrispondere esattamente uno schema in "oneOf"';
        break;
      case 'pattern':
        out = 'deve corrispondere al modello "' + (e.params.escaped) + '"';
        break;
      case 'required':
        out = 'dovrebbe avere attributo richiesta ' + (e.params.missingProperty);
        break;
      case 'type':
        out = 'dovrebbe essere ' + (e.params.type);
        break;
      case 'uniqueItems':
        out = 'non dovrebbe avere elementi duplicati (elementi ## ' + (e.params.j) + ' e ' + (e.params.i) + ' sono uguali)';
        break;
    }
    e.message = out;
  }
};
