{
  "name": "gpii-express",
  "version": "0.0.0",
  "description": "Fluid components to model an express server and associated router modules.",
  "main": "",
  "scripts": {
    "test": "node tests/all-tests.js",
    "postinstall": "grunt dedupe-infusion"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GPII/gpii-express.git"
  },
  "author": {
    "name": "Tony Atkins",
    "email": "tony@raisingthefloor.org"
  },
  "license": "BSD-3-Clause",
  "dependencies": {
    "body-parser": "1.10.2",
    "cookie-parser": "1.3.3",
    "express-session": "1.10.1",
    "express": "4.10.6",
    "grunt": "~0.4.4",
    "grunt-shell": "0.6.4",
    "grunt-contrib-jshint": "~0.9.0",
    "grunt-jsonlint": "1.0.4",
    "grunt-gpii": "git://github.com/GPII/grunt-gpii.git#58ae055833f437a9e91baedb9f39a22c5fdd727f",
    "infusion": "git://github.com/fluid-project/infusion.git#a1e3d601478e57276d4143fca5bcbe00f9c6b0cd"
  },
  "devDependencies": {
    "jqUnit": "git://github.com/fluid-project/node-jqUnit.git#b7ef53aac1ca365bf23d35d255fae874faa88b70",
    "kettle": "git://github.com/amb26/kettle.git#33e2826e78315c6d29b13c8ba810f54fef29e8ac",
    "request": "2.51.0"
  },
  "readme": "# What is this?\r\n\r\nThis package provides a series of a [Fluid components](https://github.com/fluid-project/infusion-docs/blob/master/src/documents/UnderstandingInfusionComponents.md) that encapsulates the main features of [Express](http://expressjs.com/).  Express is a node-based server framework written in Javascript.\r\n\r\nIn addition to Express itself, this package provides components that act as:\r\n\r\n 1. Routers (things that respond to requests for a given path).\r\n 2. Middleware (things that manipulate the request or response, such as parsing cookie headers)\r\n\r\n## About routers\r\n\r\nRouters are designed to work with an Express `request` object, and eventually return a `response` object to the client.  Only one router will ever respond to a single request.  To determine which router to use, each router registers itself for a particular `path`.\r\n\r\nRouters can be nested, and you can even nest an instance of a module within itself.  The `path` variable for a given router module is combined with the paths of its parents, and that ultimately determines which URLs a given router will be asked to handle.  For complex examples, see the tests included with this package.\r\n\r\nOne of the key strengths of Express 4.x and higher is that routers are self-contained bubbles that can use different middleware than any other router, or Express itself.  This is incredibly important when working with even the most common third-party modules for Express.  There are often modules that must have a particular piece of middleware, and other modules that do not work at all if that middleware is available.  Routers can either inherit middleware from their parent, or can have their own middleware as needed.\r\n\r\n\r\n## About middleware\r\n\r\nMiddleware is given access to the same `request` and `response` objects by Express.  Middleware can both read and update the request object.\r\n\r\nMiddleware is called before any router is allowed to respond.  Many middleware modules may be in use at the same time, and they are called in the order in which they are added to their parent object (Express itself or a router).  The order in which they are called can be significant.  As an example, the session middleware provided by Express will only work if the cookie parsing middleware provided by Express has already been loaded.\r\n\r\nMiddleware is visible to its container (`gpii.express` or a `gpii.express.router` module) and any of its container's child `gpii.express.router` modules.\r\n\r\n\r\n# Why would I need it?\r\n\r\nThis module allows you to wire together fluid components to serve up APIs and static content.  Simple server-side use cases can be implemented purely by configuring the components provided here.\r\n\r\n# How is this different from Kettle?\r\n\r\n[Kettle](https://github.com/GPII/kettle) is a server side framework written entirely as a series of Fluid components, and used extensively within the GPII.  Kettle serves a wider range of use cases, and provides deeper options for replacing the internals of the server.\r\n\r\nThis module, by comparison, works very much in the way that Express works.  It uses the native request and response objects provided by that framework.  In other words, this module is completely dependent on Express and is only ever likely to work like Express does.\r\n\r\n# How do I use it?\r\n\r\nTo use this module, you will need to instantiate an instance of `gpii.express` itself (or something that extends it), and wire in at least one `gpii.express.router` module.  The most basic example (serving static content) should look something like:\r\n\r\n```\r\nvar path = require(\"path\");\r\nvar contentDir = path.resolve(__dirname, \"./content\");\r\ngpii.express(\r\n{       // instance of component under test\r\n            createOnEvent: \"constructServer\",\r\n            type: \"gpii.express\",\r\n            options: {\r\n                events: {\r\n                    started: \"{testEnvironment}.events.started\"\r\n                },\r\n                config: {\r\n                    express: {\r\n                        port: 80808,\r\n                        baseUrl: \"http://localhost:80808\"\r\n                    }\r\n                },\r\n                components: {\r\n                    staticRouter: {\r\n                        type: \"gpii.express.router.static\",\r\n                        options: {\r\n                            path:    \"/\",\r\n                            content: contentDir\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n)\r\n```\r\n\r\nAs you can see, you are expected to have a `config.express` option that includes at least a `port` and `baseUrl` setting.\r\n\r\nIn this case, we also configure a \"static\" router that is designed to serve up filesystem content (see [\"Static Router Module\"](#static-router-module) for more details).\r\n\r\n## Common Middleware\r\n\r\nThis package provides predefined wrappers for common Express middleware, including:\r\n\r\n1. `gpii.express.middleware.cookieparser`: Parses client cookie headers and makes them available as part of the `request` object, via the `request.cookies` object.\r\n2. `gpii.express.middleware.session`: Parses client session cookies makes server-side session data associated with the cookie available as part of the `request` object, via the `request.sesssion` object.\r\n3. `gpii.express.middleware.urlencoded`: Parses URL encoded data passed by the client and makes it available as part of the `request` object, via the `request.query` object.\r\n4. `gpii.express.middleware.json`: Parses JSON data passed by the client and makes it available as part of the `request` object, via the `request.body` object.\r\n\r\nFor more information on any of these, look at their corresponding modules documentation in the [Express API Documentation](http://expressjs.com/4x/api.html#request).  For examples of their usage, check out the tests included with this package.\r\n\r\n## Writing your own middleware component\r\n\r\nThis package provides the abstract `gpii.express.middleware` gradeName that all middleware should extend.  At a minimum, a valid implementation must override the default `middleware` invoker.\r\n\r\nFor examples, check out the middleware modules included in the tests for this package.\r\n\r\n## Static Router Module\r\n\r\nThis package provides the `gpii.express.router.static` module, a wrapper for the [static router built into Express](http://expressjs.com/guide/using-middleware.html#middleware.built-in).\r\n\r\nAll router modules are expected to provide a `path` option that will be used to configure which URLs they will listen to.  This path follows the same conventions as the [`app.use`](http://expressjs.com/4x/api.html#app.use) method provided by the Express framework.  Notably:\r\n\r\n1.  Paths are relative to their container.\r\n2.  Paths can contain wildcards, as in\r\n\r\nAs demonstrated in the example above, this module expects to work with a full filesystem path containing content.  You can use an expander, injection, string templates, or any other means to provide this information as long as a full path is eventually available.\r\n\r\n## Writing your own router component\r\n\r\nThis package provides the abstract `gpii.express.router` gradeName that all routers should extend.  At a minimum, a valid implementation must override the default `handler` invoker.\r\n\r\nFor examples, check out the router modules included in the tests for this package.",
  "readmeFilename": "README.md",
  "gitHead": "a638658d322f9bf03beb31ef530c4f8f10ed717e",
  "bugs": {
    "url": "https://github.com/GPII/gpii-express/issues"
  },
  "homepage": "https://github.com/GPII/gpii-express#readme",
  "_id": "gpii-express@0.0.0",
  "_shasum": "c992ee54100ef25eab950821eee0c51e642ac2bc",
  "_from": "git+https://github.com/GPII/gpii-express.git#a638658d322f9bf03beb31ef530c4f8f10ed717e",
  "_resolved": "git+https://github.com/GPII/gpii-express.git#a638658d322f9bf03beb31ef530c4f8f10ed717e"
}
